package api

import "time"

// ExecutionAssertionConfig holds the configuration data for an execution and assertions
type ExecutionAssertionConfig struct {
	// Command is the command to execute
	Command string

	// ExecutionStrategy is the execution strategy to use
	ExecutionStrategy string

	// ResultAssertion is the type of result assertion to make
	ResultAssertion string

	// OutputAssertions is the type of output assertion to make
	OutputAssertions string

	// OutputTests is the regular expression to test the output with
	OutputTests string

	// Delimiter is the delimiter to use when parsing the list of OutputTests
	Delimiter string

	// Timeout is the timeout for repeated execution
	Timeout time.Duration

	// Interval is the interval betewen repeated executions
	Interval time.Duration

	// Name is the optional name of the test being run
	Name string

	// Verbose determines if output to stdout and stderr should be shown always.
	// The default behavior is to only show this output if assertions fail.
	Verbose bool
}

// ExecutionStrategy determines the type of executor to use
type ExecutionStrategy string

const (
	ExecutionStrategyOnce  = "once"
	ExecutionStrategyUntil = "until"
)

var ValidExecutionStrategies = []ExecutionStrategy{ExecutionStrategyOnce, ExecutionStrategyUntil}

// ResultAssertion determines which result tester to use
type ResultAssertion string

const (
	ResultAssertionSuccess    = "success"
	ResultAssertionFailure    = "failure"
	ResultAssertionAmbivalent = "ambivalent"
)

var ValidResultAssertions = []ResultAssertion{ResultAssertionSuccess, ResultAssertionFailure, ResultAssertionAmbivalent}

// OutputAssertion determines which output tester to use
type OutputAssertion string

const (
	OutputAssertionContains   = "contains"
	OutputAssertionExcludes   = "excludes"
	OutputAssertionAmbivalent = "ambivalent"
)

var ValidOutputAssertions = []OutputAssertion{OutputAssertionContains, OutputAssertionExcludes, OutputAssertionAmbivalent}

// ExecutionAssertionResults holds the full output of an execution and assertions
type ExecutionAssertionResults struct {
	// Duration is how long it took the command to execute
	Duration time.Duration

	// Result is the result generated by os/exec from execution
	Result error

	// ResultAssertion holds the result of the result assertion
	ResultAssertion bool

	// Stdout holds the output of the command to standard out during execution
	Stdout string

	// Stderr holds the output of the command to standard error during execution
	Stderr string

	// OutputAssertion holds the result of the output assertion
	OutputAssertion bool
}
